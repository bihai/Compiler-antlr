(program (exp let (decs (dec type any = (ty { (tyfields any : (type_id int)) })) (dec (vardec var buffer := (exp getchar ( )))) (dec function readint ( (tyfields any : (type_id any)) ) : (type_id int) = (exp let (decs (dec (vardec var i := (exp 0))) (dec function isdigit ( (tyfields s : (type_id string)) ) : (type_id int) = (exp (exp (exp ord ( (exp (lvalue buffer)) )) >= (exp ord ( (exp "0") ))) & (exp (exp ord ( (exp (lvalue buffer)) )) <= (exp ord ( (exp "9") ))))) (dec function skipto ( ) = (exp while (exp (exp (exp (lvalue buffer)) = (exp " ")) | (exp (exp (lvalue buffer)) = (exp "\n"))) do (exp (lvalue buffer) := (exp getchar ( )))))) in (exps (exp skipto ( )) ; (exp (lvalue (lvalue any) . any) := (exp isdigit ( (exp (lvalue buffer)) ))) ; (exp while (exp isdigit ( (exp (lvalue buffer)) )) do (exp ( (exps (exp (lvalue i) := (exp (exp (exp (exp (lvalue i)) * (exp 10)) + (exp ord ( (exp (lvalue buffer)) ))) - (exp ord ( (exp "0") )))) ; (exp (lvalue buffer) := (exp getchar ( )))) ))) ; (exp (lvalue i))) end)) (dec type list = (ty { (tyfields first : (type_id int) , rest : (type_id list)) })) (dec function readlist ( ) : (type_id list) = (exp let (decs (dec (vardec var any := (exp (type_id any) { any = (exp 0) }))) (dec (vardec var i := (exp readint ( (exp (lvalue any)) ))))) in (exps (exp if  (exp (lvalue (lvalue any) . any)) then (exp (type_id list) { first = (exp (lvalue i)) , rest = (exp readlist ( )) }) else (exp nil))) end)) (dec function merge ( (tyfields a : (type_id list) , b : (type_id list)) ) : (type_id list) = (exp if  (exp (exp (lvalue a)) = (exp nil)) then (exp (lvalue b)) else (exp if  (exp (exp (lvalue b)) = (exp nil)) then (exp (lvalue a)) else (exp if  (exp (exp (lvalue (lvalue a) . first)) < (exp (lvalue (lvalue b) . first))) then (exp (type_id list) { first = (exp (lvalue (lvalue a) . first)) , rest = (exp merge ( (exp (lvalue (lvalue a) . rest)) , (exp (lvalue b)) )) }) else (exp (type_id list) { first = (exp (lvalue (lvalue b) . first)) , rest = (exp merge ( (exp (lvalue a)) , (exp (lvalue (lvalue b) . rest)) )) }))))) (dec function printint ( (tyfields i : (type_id int)) ) = (exp let (decs (dec function f ( (tyfields i : (type_id int)) ) = (exp if  (exp (exp (lvalue i)) > (exp 0)) then (exp ( (exps (exp f ( (exp (exp (lvalue i)) / (exp 10)) )) ; (exp print ( (exp chr ( (exp (exp (exp (lvalue i)) - (exp (exp (exp (lvalue i)) / (exp 10)) * (exp 10))) + (exp ord ( (exp "0") ))) )) ))) ))))) in (exps (exp if  (exp (exp (lvalue i)) < (exp 0)) then (exp ( (exps (exp print ( (exp "-") )) ; (exp f ( (exp - (exp (lvalue i))) ))) )) else (exp if  (exp (exp (lvalue i)) > (exp 0)) then (exp f ( (exp (lvalue i)) )) else (exp print ( (exp "0") ))))) end)) (dec function printlist ( (tyfields l : (type_id list)) ) = (exp if  (exp (exp (lvalue l)) = (exp nil)) then (exp print ( (exp "\n") )) else (exp ( (exps (exp printint ( (exp (lvalue (lvalue l) . first)) )) ; (exp print ( (exp " ") )) ; (exp printlist ( (exp (lvalue (lvalue l) . rest)) ))) )))) (dec (vardec var list1 := (exp readlist ( )))) (dec (vardec var list2 := (exp ( (exps (exp (lvalue buffer) := (exp getchar ( ))) ; (exp readlist ( ))) ))))) in (exps (exp printlist ( (exp merge ( (exp (lvalue list1)) , (exp (lvalue list2)) )) ))) end))
